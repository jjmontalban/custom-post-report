La estructura del plugin se compone de varios archivos y carpetas, incluyendo:

Un archivo principal de plugin, que contiene la información básica del plugin y carga todos los demás archivos y carpetas del plugin.
Un archivo README.txt que describe lo que hace el complemento, quién lo creó, así como un registro de cambios e información de versiones.
Una carpeta “includes”, que contiene archivos de funciones y clases que se utilizan en el plugin.
Una carpeta “languages” que contiene todos los archivos necesarios para las traducciones.
Una carpeta “admin”, que contiene archivos y carpetas relacionadas con la parte de administración del plugin.
Una carpeta “public”, que contiene archivos y carpetas relacionadas con la parte pública del plugin.
Un archivo “uninstall.php”, que contiene código para desinstalar el plugin y eliminar cualquier rastro de él de la base de datos de WordPress.

Carpeta includes: esta carpeta es donde las funcionalidades del área de administración y la parte pública son compartidas. Destacaría el fichero class-nombre-plugin.php, donde podrás agregar tus hooks para la parte de admin y public. Si te fijas en este fichero, encontrarás cuatro hooks ya añadidos para cargar los ficheros css y js, dos de ellos dentro del método define_admin_hooks() para la parte de backend (admin) y los otros dos hooks definidos estarán dentro del método define_public_hooks() para la parte de frontend (public).

Carpeta admin: en esta carpeta encontrarás la base para trabajar con la parte de administración de tu plugin, encontrarás subcarpetas para alojar los ficheros de css y js que necesites, una carpeta para las vistas o partials y el fichero class-nombre-plugin-admin.php, donde podrás definir las funciones que son llamadas al definir los hooks.

Carpeta public: esta carpeta es prácticamente un clon de la carpeta admin, con la diferencia de que está enfocada para trabajar con la parte pública de tu plugin o, lo que es lo mismo, la parte que los usuarios van a ver.

Carpeta languages: simplemente encontramos un fichero .pot para trabajar con la traducción de nuestro plugin y poder internacionalizarlo. Para editarlo puedes trabajar con Poedit.
Si no sabes muy bien qué acción realiza cada fichero, podrás encontrar comentarios en cada uno de ellos que explican en qué consisten. En ese aspecto, el código está ampliamente comentado para que sepas en todo momento sus funcionalidades.

AHora que ya sabes mi estructura ncesito que me ayudes a crear las priemnras funcinlaidadades del plugin







primero que vamos hacer es añadir en el menú del administrador de WordPress una opción para que cuando se active podamos acceder a las opciones de plugin.





Lo primero que tenemos que hacer es editar el archivo class-cpt-metrics.php

que encontrarás en wp-content/plugins/prueba/includes/class-cpt-metrics.php

El siguiente paso será buscar la función:

private function define_admin_hooks()
Al final de esa función y antes del cierre añadimos lo siguiente:

// Añadimos plugin menú principal
  $this->loader->add_action( 'admin_menu', $plugin_admin, 'add_menu' );
El bloque de código completo tendría que ser algo parecido a esto:

/**
* Register all of the hooks related to the admin area functionality
* of the plugin.
*
* @since 1.0.0
* @access private
*/
private function define_admin_hooks() {

$plugin_admin = new Prueba_Admin( $this->get_plugin_name(), $this->get_version() );

$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );
$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );
// Añadimos plugin menú principal
$this->loader->add_action( 'admin_menu', $plugin_admin, 'add_menu' );

}